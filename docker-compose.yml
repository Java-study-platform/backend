version: '3.8'

services:
  postgres_keycloak:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgressergtosp
      POSTGRES_DB: keycloak
    ports:
      - "5432:5432"
    networks:
      - backend

  postgres_user:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgressergtosp
      POSTGRES_DB: user
    ports:
      - "5433:5433"
    networks:
      - backend

  postgres_core:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgressergtosp
      POSTGRES_DB: core
    ports:
      - "5434:5434"
    networks:
      - backend

  postgres_notifications:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgressergtosp
      POSTGRES_DB: notifications
    ports:
      - "5435:5435"
    networks:
      - backend

  postgres_solutions:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgressergtosp
      POSTGRES_DB: solutions
    ports:
      - "5436:5436"
    networks:
      - backend

  gateway:
    restart: always
    build:
      context: ./gateway
      dockerfile: Dockerfile
      network: host
    ports:
      - "9090:9090"
    networks:
      - backend

  core-app:
    build:
      context: ./core
      dockerfile: Dockerfile
      network: host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_core/core
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgressergtosp
    depends_on:
      - postgres_core
    ports:
      - "8082:8082"
    networks:
      - backend

  user-app:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      network: host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_user/user
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgressergtosp
    depends_on:
      - postgres_user
    ports:
      - "8081:8081"
    networks:
      - backend

  notifications-app:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      network: host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_notifications/notifications
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgressergtosp
    depends_on:
      - postgres_notifications
    ports:
      - "8083:8083"
    networks:
      - backend

  solutions-app:
    build:
      context: ./solution-service
      dockerfile: Dockerfile
      network: host
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_solutions/solutions
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgressergtosp
    depends_on:
      - postgres_solutions
    ports:
      - "8084:8084"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: broker
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    networks:
      - backend

  service-registry:
    restart: always
    build:
      context: ./service-registry
      dockerfile: Dockerfile
      network: host
    ports:
      - "8761:8761"
    networks:
      - backend

  auth:
    image: quay.io/keycloak/keycloak:24.0.4
    restart: always
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: keycloakadmin123
      KEYCLOAK_FRONTEND_URL: http://localhost:8080
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_DEBUG: 'true'
      KC_HOSTNAME: localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_HEALTH_ENABLED: 'true'
      KC_DB: postgres
      KC_DB_PASSWORD: postgressergtosp
      KC_DB_SCHEMA: public
      KC_DB_USERNAME: postgres
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/keycloak
      KC_PROXY_HEADERS: forwarded
      KC_HOSTNAME_STRICT: 'false'
      KC_HTTPS_ENABLED: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm.json:ro
    depends_on:
      - postgres_keycloak
    command: [ "start-dev" ]
    networks:
      - backend


networks:
  backend:
    driver: bridge